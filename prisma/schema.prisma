// learn more about it in the docs: https://pris.ly/d/prisma-schema
// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

 enum ROLE {
  USER
  ADMIN 
}

enum PAYMENT_METHOD {
  COD
  PAYPAL
}
enum ORDER_STATUS {
  INPROGRESS
  COMPLETED
  CANCELED
}

enum FEEDBACK_STATUS {
  PENDING
  ACCEPTED
  DENIED
}

enum PRODUCT_STATUS {
  AVAILABLE
  SOLDOUT
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String?
  email String @unique
  password String 
  phone String @unique
  avatar String?
  orders Order[]
  feedback Feedback[]
  role ROLE @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String @unique
  price Int
  quantity Int
  discount Float @default(0)
  description String
  specifications String
  images String[]
  color String[]
  capacity String[]
  buyTurn Int @default(0)
  ratting Float @default(0)
  slug String 
  categoryId String @db.ObjectId 
  category Category @relation(fields: [categoryId] , references: [id])
  brandId String @db.ObjectId 
  brand Brand @relation(fields: [brandId] , references: [id])
  status PRODUCT_STATUS @default(AVAILABLE)
  feedback Feedback[]
  OrderDetail OrderDetail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  thumbnail String
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  thumbnail String
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Feedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  ratting Float @default(0.0)
  status FEEDBACK_STATUS @default(PENDING)
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  customerId String @db.ObjectId
  user User @relation(fields: [customerId], references: [id])
  orderItems OrderDetail[]
  nameReceiver String
  phoneReceiver String
  deliveryAddressReceiver String
  note String
  paymentMethod PAYMENT_METHOD @default(COD)
  status ORDER_STATUS @default(INPROGRESS)
  shippingServiceName String
  shippingFee Int
  discountTotal Int
  subTotal Int
  total Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([id,customerId])     
}


model OrderDetail {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId @unique
  order Order @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  quantity String
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

